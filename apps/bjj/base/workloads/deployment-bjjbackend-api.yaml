# Deployment pentru aplicația bjjbackend API (minimal base; overlays adaugă probe/resurse/replici/DNS).
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-bjjbackend-api
  namespace: bjj
spec: # Specificația Deployment-ului

  strategy:
    type: RollingUpdate # Update gradual fără downtime
    rollingUpdate: # Parametri ai rolling update-ului
      maxUnavailable: 0 # Nicio replică indisponibilă în timpul update-ului
      maxSurge: 1 # Cel mult o replică în plus față de numărul dorit
  selector: # Selectează pods-urile gestionate de acest Deployment
    matchLabels:
      app: bjjbackend-api-pod-label # Trebuie să corespundă cu labels din template
  template: # Template-ul de Pod pentru replici
    metadata:
      labels:
        app: bjjbackend-api-pod-label # Etichetă pentru selectare și servicii
    spec: # Specificația Pod-ului
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        - name: single-request-reopen
        - name: timeout
          value: "2"
        - name: attempts
        value: "3"
      containers: # Lista containerelor din Pod
        - name: container-bjjbackend-api
          image: mariusgeorgescu/bjjserver
          imagePullPolicy: IfNotPresent # Politica de pull a imaginii
          envFrom: # Surse de variabile de mediu
            - configMapRef:
                name: configmap-bjjbackend # ConfigMap referit pentru variabile
          ports: # Porturi expuse de container
            - name: http # Numele portului
              containerPort: 8082 # Portul pe care ascultă aplicația
          volumeMounts: # Montări de volume în container
            - name: lookup-db # Numele volumului definit mai jos
              mountPath: /data # Calea de montare în container
              readOnly: false # Montare R/W
      volumes: # Volume disponibile în Pod
        - name: lookup-db
          persistentVolumeClaim:
            claimName: pvc-bjjbackend-lookup # Referința către PersistentVolumeClaim

