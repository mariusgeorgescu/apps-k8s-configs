apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: keepalived
  namespace: kube-system
  labels:
    app: keepalived
    component: network
spec:
  selector:
    matchLabels:
      app: keepalived
  template:
    metadata:
      labels:
        app: keepalived
        component: network
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: keepalived
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          # Simple approach - use busybox with manual VIP management
          echo "Starting simple VIP management for 192.168.1.200"
          # Add VIP to interface
          ip addr add 192.168.1.200/24 dev eth0
          # Keep container alive and monitor API
          while true; do
            if curl -k -s https://127.0.0.1:6443/healthz > /dev/null; then
              # API is healthy, ensure VIP is present
              if ! ip addr show eth0 | grep -q 192.168.1.200; then
                ip addr add 192.168.1.200/24 dev eth0
              fi
            else
              # API is unhealthy, remove VIP
              ip addr del 192.168.1.200/24 dev eth0 2>/dev/null || true
            fi
            sleep 5
          done
        securityContext:
          privileged: true
          capabilities:
            add: ["NET_ADMIN", "NET_RAW", "NET_BROADCAST"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps | grep -v grep | grep -q 'sleep 5' || exit 1"
          initialDelaySeconds: 10
          periodSeconds: 20
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ip addr show eth0 | grep -q 192.168.1.200 || exit 1"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
